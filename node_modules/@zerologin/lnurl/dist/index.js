// src/index.ts
import { bech32 } from "bech32";

// src/utils.ts
var getRootDomain = (url) => {
  if (!url.includes("://")) {
    url = "http://" + url;
  }
  const regex = /^.*:\/\/(?:[wW]{3}\.)?([^:\/]*).*$/gm;
  const result = regex.exec(url);
  if (result && result.length > 1) {
    return result[1];
  }
  throw new Error(`Cannot get root domain for "${url}"`);
};
var getLnurlObject = (params, obj) => {
  var _a;
  return (_a = params.get(obj)) != null ? _a : "";
};

// src/index.ts
var limit = 1023;
var prefix = "lnurl";
var decode = (lnurl) => {
  const protocol = "lightning:";
  if (lnurl.toLowerCase().includes(protocol)) {
    lnurl = lnurl.toLowerCase().split("lightning:")[1];
  }
  const decoded = bech32.decode(lnurl, limit);
  const decodedString = Buffer.from(bech32.fromWords(decoded.words)).toString("utf8");
  const split = decodedString.split("?");
  if (split.length !== 2) {
    throw new Error(`Cannot decode LNURL string ('${lnurl}')`);
  }
  const url = split[0];
  const domain = getRootDomain(url);
  const lnurlObject = new URLSearchParams(split[1]);
  return { decoded: decodedString, domain, tag: getLnurlObject(lnurlObject, "tag"), k1: getLnurlObject(lnurlObject, "k1"), action: getLnurlObject(lnurlObject, "action") };
};
var encode = (unencoded) => {
  let words = bech32.toWords(Buffer.from(unencoded, "utf8"));
  return bech32.encode(prefix, words, limit).toUpperCase();
};
export {
  decode,
  encode
};
//# sourceMappingURL=index.js.map